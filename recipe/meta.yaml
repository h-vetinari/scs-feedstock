{% set version = "2.1.4" %}
# see github.com/conda-forge/conda-forge.github.io/issues/1059 for naming discussion
{% set scs_proc_type = "cuda" if cuda_compiler_version != "None" else "cpu" %}

package:
  name: scs-split
  version: {{ version|replace('-', '.') }}    # 2.1.1-2 => 2.1.1.2

source:
  url: https://pypi.io/packages/source/s/scs/scs-{{ version }}.tar.gz
  sha256: ddd6614db7f0e63b69672cfd02ba2c8423dade33a58b0a341a5119091c501739
  patches:
    # to unblock osx-arm build, which spuriously tries to install stuff
    - patches/0001-remove-pyproject.toml.patch  # [build_platform != target_platform]

build:
  number: 0
  skip: true  # [win and cuda_compiler_version == "10.2"]

requirements:
  build:
    - {{ compiler('c') }}

outputs:
  # A meta-package to select CPU or GPU build for scs.
  - name: scs-proc
    version: 1.0.0
    build:
      string: {{ scs_proc_type }}
    test:
      commands:
        - exit 0

  - name: scs
    script: build-pkg.sh   # [not win]
    script: build-pkg.bat  # [win]
    build:
      string: "py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}_{{ scs_proc_type }}"                                                  # [cuda_compiler_version == "None"]
      string: "py{{ CONDA_PY }}cuda{{ cuda_compiler_version|replace(".", "") }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}_{{ scs_proc_type }}"  # [cuda_compiler_version != "None"]
    requirements:
      build:
        - python                                 # [build_platform != target_platform]
        - cross-python_{{ target_platform }}     # [build_platform != target_platform]
        - numpy                                  # [build_platform != target_platform]
        - {{ compiler('c') }}
        - {{ compiler('cuda') }}                 # [cuda_compiler_version != "None"]
      host:
        - python
        - setuptools
        - pip
        - numpy
        - scipy
        - libblas
        - liblapack
      run:
        - python
        - {{ pin_compatible('numpy') }}
        - scipy
      run_constrained:
        - scs-proc =*={{ scs_proc_type }}

    test:
      imports:
        - scs
        - _scs_direct
        - _scs_indirect
      requires:
        - pytest
      source_files:
        - test/
      commands:
        - pytest test/ -v

about:
  home: https://github.com/bodono/scs-python
  license: MIT
  license_family: MIT
  license_file: LICENSE
  summary: Python interface for SCS, which solves convex cone problems
  description: |
    Solves convex cone programs via operator splitting.
    Can solve: linear programs (LPs), second-order cone programs (SOCPs),
    semidefinite programs (SDPs), exponential cone programs (ECPs),
    and power cone programs (PCPs), or problems with any combination of
    those cones.
  dev_url: https://github.com/bodono/scs-python

extra:
  recipe-maintainers:
    - djsutherland
    - mcg1969
    - h-vetinari
  feedstock-name: scs
